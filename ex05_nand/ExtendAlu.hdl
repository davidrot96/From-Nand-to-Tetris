/**
* The input of the extends ALU is instruction[9] and x[16],y[16].
* the output is define as follows:
* If instruction[7..8] equals 1 the the output is exactly as the ALU.
* Where instruction[5]=zx,instruction[4]=nx,...,instruction[0]=no.
* If instruction[7] equals 0 the output will be x*y and disregard the rest 
* of the instruction.
*
* If instruction[8] equals 0 the output will be shift.
* Then, if instruction[4] equals 0 it will return shift of y otherwise shift 
* of x, moreover if instruction[5] equals 0 it will return shift right 
* otherwise shift left.
**/
CHIP ExtendAlu{
     IN x[16],y[16],instruction[9];
     OUT out[16],zr,ng;
     
     PARTS:
     ALU(x=x, y=y, zx=instruction[5], nx=instruction[4], 
          zy=instruction[3], ny=instruction[2], f=instruction[1], 
          no=instruction[0], out=outALU1, zr=zr1, ng=ng1); 
          // instruction[7,8] == 1 return ALU
     
      Mul(a=x,b=y,out=outMul); // instruction[7] == 0, return Mul(x,y)
     
      ShiftLeft(in=y,out=outYleft);
      ShiftRight(in=y,out=outYright);
  
      ShiftLeft(in=x,out=outXleft);
      ShiftRight(in=x,out=outXright);
  
      Mux4Way16(a=outYright, b=outXright, c=outYleft, 
          d=outXleft, sel=instruction[4..5], out=outshift);
  
      Mux4Way16(a=outMul, b=outshift, c=outMul, d=outALU1, 
          sel=instruction[7..8],out[15]=ng,out[0..7]=or1,out[8..15]=or2, out=out);


     // if out == 0 we set zr to 1
      Or8Way(in=or1, out=or1out);    
      Or8Way(in=or2, out=or2out);
      Or(a=or1out, b=or2out, out=out8);
      Not(in=out8, out=zr);
}