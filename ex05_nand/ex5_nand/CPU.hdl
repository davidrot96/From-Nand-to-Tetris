// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:

    // get instruction type
    Not(in=instruction[15], out=outNot15);
    Not(in=outNot15, out=outIn15);

    //if C instraction and dest to A register
    And(a=outIn15, b=instruction[5], out=outD1);
    Mux16(a=instruction, b=outALO, sel=outD1, out=outMux1);
 
    //load A if A instraction or C instraction and dest to A register
    Or(a=outNot15, b=outD1, out=outOr1);
    ARegister(in=outMux1, load=outOr1, out=outAReg);

    // select A or M based on the a bit
    Mux16(a=outAReg, b=inM, sel=instruction[12], out=outMux2);

    And(a=outIn15, b=instruction[4], out=outD2);

    //load the D register from ALU
    DRegister(in=outALO, load=outD2, out=outDReg);

    // calculate
    ALU(x=outDReg, y=outMux2, zx=instruction[11], nx=instruction[10], 
        zy=instruction[9], ny=instruction[8], f=instruction[7], 
        no=instruction[6], out=outALO, zr=outZR, ng=outNG);

    // set output for writing memory
    Or16(a=false, b=outAReg, out[0..14]=addressM);
    Or16(a=false, b=outALO, out=outM);
    And(a=outIn15, b=instruction[3], out=writeM);

    And(a=outZR, b=instruction[1], out=jeq); // jump if outLAU is zero
    And(a=outNG, b=instruction[2], out=jlt); // jump if outALU is negtive

    Or(a=outZR, b=outNG, out=outIsNotPositive);
    Not(in=outIsNotPositive, out=outPositive);

    And(a=outPositive, b=instruction[0], out=jgt); // jump if outALU is positive
    Or(a=jeq, b=jlt, out=jle);
    Or(a=jle, b=jgt, out=outJUMP);
    And(a=outIn15, b=outJUMP, out=outPC);
    Not(in=outPC, out=outInC);  //only inc if not load
    PC(in=outAReg, load=outPC, inc=outInC, reset=reset, out[0..14]=pc);
}