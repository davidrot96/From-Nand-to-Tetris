
// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
 class Math {
    static Array bin_array;
    static int yq2;
    /** Initializes the library. */
    function void init() {
        var int x,y;
        let bin_array = Array.new(16);
        let x = 0;
        let y = 1;
        let yq2 = 0;
        while(x < 16){
            let bin_array[x] = y;
            let y = y + y;
            let x = x + 1;
        }
        return;
    }
    function int bit(int x,int i){
        if((bin_array[i] & x)=0){
            return 0;
        }
        return 1;
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
        if(x < 0){
            return -x;
        }
        return x;
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
        var int shiftetX,sum,j;
        let shiftetX = x;
        let sum = 0;
        let j = 0;
        while(j < 16){
            if(Math.bit(y,j) = 1){let sum = sum + shiftetX;}
            let j=j+1;
            let shiftetX = shiftetX + shiftetX;
        }
        return sum;
    }

    
    function int power(int i){
        return bin_array[i];
    }

    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int x, int y) {
        var boolean neg_y,neg_x;
        var int result;
        let neg_x = x < 0;
        let neg_y = y < 0;
        let yq2 = 0;
        if (neg_x | neg_y){
            let x = Math.abs(x);
            let y =  Math.abs(y);
        }
        let result = Math.divide_helper(x, y);
        if(neg_x = neg_y){
            return result;
        }
        return - result;  
    }
    function int divide_helper(int x, int y) {
        var int q;
        if((y > x) | (y < 0)){
            return 0;
        }
        let q = Math.divide_helper(x,y+y);
        if((x-yq2) < y){
            return q+q;
        }
        else{
            let yq2 = yq2 + y;
            return q+q+1;
        }
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
        var int y,j,sum;
        let y = 0;
        let j = 7;
        while(j > -1){
            let sum = (y+bin_array[j])*(y+bin_array[j]);
            if(((sum - 1) < x) & (sum > 0 )){
                let y = y + bin_array[j];
            }
            let j = j - 1;
            }
        return y;
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
        if(a > b){return a;}
        return b;
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
        if(a < b){return a;}
        return b;
    }
}